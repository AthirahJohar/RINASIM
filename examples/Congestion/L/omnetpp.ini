#--gaixas1 : Maintain
#----------  Don't fingerprint
[General]
network = L
**.pduTracing = false
**.scalar-recording = false
**.vector-recording = false

#DIF Allocator settings
**.difAllocator.directory.configData = xmldoc("directory.xml", "DA")

#Shim-Flows allocation
**.ra.preallocation = xmldoc("connectionset.xml", "ConnectionSet")
**.flowAllocator.newFlowReqPolicyType = "MinComparer"
**.isSelfEnrolled = true

#Routing settings
**.relayIpc.resourceAllocator.pdufgPolicyName ="SimpleLatOrHopMEntries"
**.relayIpc.relayAndMux.ForwardingPolicyName = "IMultiQoSTable"
**.relayIpc.routingPolicyName = "TSimpleDV"

**.relayIpc.resourceAllocator.pduFwdGenerator.data = xmldoc("metrics.xml", "Metrics")

**.relayIpc.resourceAllocator.pduFwdGenerator.infinite = 200
**.relayIpc.resourceAllocator.pduFwdGenerator.latMultip = 2

**.relayIpc.relayAndMux.pduForwardingPolicy.MA2QoS = "MA"

##---Backbone---

#QoS settings
**.relayIpc.**.ra.qoscubesData = xmldoc("qoscube.xml", "QoSCubesSet")
**.relayIpc.**.ra.qosReqData = xmldoc("qosreq.xml", "QoSReqSet")

**.ipcProcess[*].**.ra.qoscubesData = xmldoc("shimqoscube.xml", "QoSCubesSet")


#DIF & shims
**.relayIpc.difName = "Core"

**.A.**.ipcAddress = "A"
**.B.**.ipcAddress = "B"
**.C.**.ipcAddress = "C"

**.A.ipcProcess[0].difName = "sAB"
**.B.ipcProcess[0].difName = "sAB"
**.B.ipcProcess[1].difName = "sBC"
**.C.ipcProcess[0].difName = "sBC"


#Infection Data
**.listener.data = xmldoc("ListenQoS.xml", "QoS")
#**.listener.runname = ""

**.C.relayIpc.**.addrComparatorName = "InfectionComparator"

**.listener.configname = "I3"
**.A.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='I1']")
**.B.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='B']")
**.C.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='C']")

#**.infection.rateMult = ${usage = 85000000, 90000000,95000000, 100000000,120000000, 150000000}
#**.listener.runname = ${runname = "85%", "90%", "95%", "100%", "120%", "150%" ! usage}

**.infection.rateMult = 102000000
**.listener.runname = "102%"


#**.infection.rateMult = 1200000000
#**.infection.rateMult = 85000000
**.infection.rateVar = 0.25
**.infection.pduVar = 0.4
**.infection.probRateChange = 0.001
**.infection.rateVarVar = 0.001
**.infection.nFlows =  100
**.infection.inRate = 1000


**.infection.iniTime = 30.000
**.infection.finTime = 40.000

**.infection.markIniT = 0.000
**.infection.markFinT = 99.000



**.defaultThreshQLength = 0
**.defaultMaxQLength =  200

**.efcp.maxPDUSize = 100000B
**.efcp.maxSDUSize = 100000B


[Config Old]

**.defaultThreshQLength = 0
**.defaultMaxQLength =  200

**.ipcProcess[*].**.queueAllocPolicyName = "QueuePerNFlow"
**.ipcProcess[*].**.queueIdGenName = "IDPerNFlow"

**.ipcProcess[*].relayAndMux.maxQPolicyName = "TailDrop"
**.ipcProcess[*].relayAndMux.qMonitorPolicyName = "IterativeStopMonitor"
**.ipcProcess[*].relayAndMux.schedPolicyName = "IterativeScheduling"


**.relayIpc.**.queueAllocPolicyName = "QueuePerNQoS"
**.relayIpc.**.queueIdGenName = "IDPerNQoS"

**.relayIpc.relayAndMux.maxQPolicyName = "DumbMaxQ"
**.relayIpc.relayAndMux.qMonitorPolicyName = "ModularMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "DumbSch"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule_Type = "MM_DL_Out"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule.data = xmldoc("modules.xml", "Configuration/DLOUT")

**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule_Type = "MM_DQ_Drop"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule.data = xmldoc("modules.xml", "Configuration/DQQueueDrop")


**.relayIpc.relayAndMux.maxQueuePolicy.printAtEnd = true

[Config New]

#**.listener.configname = "Test"
#**.listener.runname = "Mini"

**.defaultThreshQLength = 5000
**.defaultMaxQLength =  5000

**.ipcProcess[*].**.queueAllocPolicyName = "QueuePerNFlow"
**.ipcProcess[*].**.queueIdGenName = "IDPerNFlow"

**.ipcProcess[*].relayAndMux.maxQPolicyName = "TailDrop"
**.ipcProcess[*].relayAndMux.qMonitorPolicyName = "IterativeStopMonitor"
**.ipcProcess[*].relayAndMux.schedPolicyName = "IterativeScheduling"


**.relayIpc.**.queueAllocPolicyName = "QueuePerNQoS"
**.relayIpc.**.queueIdGenName = "IDPerNQoS"

**.relayIpc.relayAndMux.qMonitorPolicyName = "QTAMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "QTASch"
#**.A.relayIpc.relayAndMux.queueMonitorPolicy.shapersData = xmldoc("QTA.xml", "Configuration/shapersB")
**.relayIpc.relayAndMux.queueMonitorPolicy.shapersData = xmldoc("QTA.xml", "Configuration/shapers")
**.relayIpc.relayAndMux.queueMonitorPolicy.muxData = xmldoc("QTA.xml", "Configuration/mux")


**.relayIpc.relayAndMux.maxQueuePolicy.printAtEnd = true

