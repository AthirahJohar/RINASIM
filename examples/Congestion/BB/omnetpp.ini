#--gaixas1 : Maintain
#----------  Don't fingerprint
[General]
network = BB
**.pduTracing = false
**.scalar-recording = false
**.vector-recording = false

#DIF Allocator settings
**.difAllocator.directory.configData = xmldoc("directory.xml", "DA")

#Shim-Flows allocation
**.ra.preallocation = xmldoc("connectionset.xml", "ConnectionSet")
**.flowAllocator.newFlowReqPolicyType = "MinComparer"
**.isSelfEnrolled = true

#Routing settings
**.relayIpc.resourceAllocator.pdufgPolicyName ="SimpleLatOrHopMEntries"
**.relayIpc.relayAndMux.ForwardingPolicyName = "wocIMultiQoSTable"
**.relayIpc.routingPolicyName = "TSimpleDV"

**.relayIpc.resourceAllocator.pduFwdGenerator.data = xmldoc("metrics.xml", "Metrics")

**.relayIpc.resourceAllocator.pduFwdGenerator.infinite = 200
**.relayIpc.resourceAllocator.pduFwdGenerator.latMultip = 2

**.relayIpc.relayAndMux.pduForwardingPolicy.MA2QoS = "MA"

##---Backbone---

#QoS settings
**.relayIpc.**.ra.qoscubesData = xmldoc("qoscube.xml", "QoSCubesSet")
**.relayIpc.**.ra.qosReqData = xmldoc("qosreq.xml", "QoSReqSet")

**.ipcProcess[*].**.ra.qoscubesData = xmldoc("shimqoscube.xml", "QoSCubesSet")


#DIF & shims
**.r*.relayIpc.difName = "Core"

**.r1.relayIpc.ipcAddress = "1"
**.r2.relayIpc.ipcAddress = "2"
**.r3.relayIpc.ipcAddress = "3"
**.r4.relayIpc.ipcAddress = "4"
**.r5.relayIpc.ipcAddress = "5"
**.r6.relayIpc.ipcAddress = "6"
**.r7.relayIpc.ipcAddress = "7"
**.r8.relayIpc.ipcAddress = "8"
**.r9.relayIpc.ipcAddress = "9"
**.ra.relayIpc.ipcAddress = "a"

**.r1.ipcProcess[0].difName = "shim12"
**.r1.ipcProcess[1].difName = "shim13"
**.r1.ipcProcess[2].difName = "shim16"

**.r2.ipcProcess[0].difName = "shim12"
**.r2.ipcProcess[1].difName = "shim23"
**.r2.ipcProcess[2].difName = "shim25"

**.r3.ipcProcess[0].difName = "shim13"
**.r3.ipcProcess[1].difName = "shim23"
**.r3.ipcProcess[2].difName = "shim34"

**.r4.ipcProcess[0].difName = "shim34"
**.r4.ipcProcess[1].difName = "shim45"
**.r4.ipcProcess[2].difName = "shim46"

**.r5.ipcProcess[0].difName = "shim25"
**.r5.ipcProcess[1].difName = "shim45"
**.r5.ipcProcess[2].difName = "shim57"

**.r6.ipcProcess[0].difName = "shim16"
**.r6.ipcProcess[1].difName = "shim46"
**.r6.ipcProcess[2].difName = "shim67"
**.r6.ipcProcess[3].difName = "shim68"

**.r7.ipcProcess[0].difName = "shim57"
**.r7.ipcProcess[1].difName = "shim67"
**.r7.ipcProcess[2].difName = "shim79"

**.r8.ipcProcess[0].difName = "shim68"
**.r8.ipcProcess[1].difName = "shim89"
**.r8.ipcProcess[2].difName = "shim8a"

**.r9.ipcProcess[0].difName = "shim79"
**.r9.ipcProcess[1].difName = "shim89"
**.r9.ipcProcess[2].difName = "shim9a"

**.ra.ipcProcess[0].difName = "shim8a"
**.ra.ipcProcess[1].difName = "shim9a"


**.r1.ipcProcess[*].ipcAddress = "1"
**.r2.ipcProcess[*].ipcAddress = "2"
**.r3.ipcProcess[*].ipcAddress = "3"
**.r4.ipcProcess[*].ipcAddress = "4"
**.r5.ipcProcess[*].ipcAddress = "5"
**.r6.ipcProcess[*].ipcAddress = "6"
**.r7.ipcProcess[*].ipcAddress = "7"
**.r8.ipcProcess[*].ipcAddress = "8"
**.r9.ipcProcess[*].ipcAddress = "9"
**.ra.ipcProcess[*].ipcAddress = "a"


#Infection Data
**.listener.data = xmldoc("ListenQoS.xml", "QoS")

**.r1.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_1']")
**.r2.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_2']")
**.r3.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_3']")
**.r4.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_4']")
**.r5.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_5']")
**.r6.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_6']")
**.r7.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_7']")
**.r8.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_8']")
**.r9.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_9']")
**.ra.infection.data = xmldoc("infection.xml", "Infection/InfectionNode[@id='Node_a']")

**.r*.relayIpc.**.addrComparatorName = "InfectionComparator"

**.listener.configname = "Infection"
#**.infection.rateMult = ${usage = 85000000, 90000000,95000000, 100000000,120000000, 150000000}
#**.listener.runname = ${runname = "85%", "90%", "95%", "100%", "120%", "150%" ! usage}

#**.infection.rateMult = ${usage = 85000000, 90000000,95000000, 120000000, 150000000}
##**.infection.rateMult = 100000000*${usage = 0.85, 0.9, 0.95, 1, 1.2, 1.5}
##**.listener.runname = ${runname = "85%", "90%", "95%", "100%", "120%", "150%" ! usage}

#**.infection.rateMult = 100000000*1.0
#**.listener.runname = "100%"

**.infection.rateMult = 100000000*1.07
**.listener.runname = "107%"


**.infection.rateVar = 0.25
**.infection.pduVar = 0.4
**.infection.probRateChange = 0.001
**.infection.rateVarVar = 0.001
**.infection.nFlows =  100
**.infection.inRate = 1000


**.infection.iniTime = 30.000
**.infection.finTime = 31.000

**.infection.markIniT = 0.000
**.infection.markFinT = 99.000

**.efcp.maxPDUSize = 100000B
**.efcp.maxSDUSize = 100000B

**.defaultThreshQLength = 5000
**.defaultMaxQLength =  5000

**.ipcProcess[*].**.queueAllocPolicyName = "QueuePerNFlow"
**.ipcProcess[*].**.queueIdGenName = "IDPerNFlow"

**.ipcProcess[*].relayAndMux.maxQPolicyName = "TailDrop"
**.ipcProcess[*].relayAndMux.qMonitorPolicyName = "IterativeStopMonitor"
**.ipcProcess[*].relayAndMux.schedPolicyName = "IterativeScheduling"


**.relayIpc.**.queueAllocPolicyName = "QueuePerNQoS"
**.relayIpc.**.queueIdGenName = "IDPerNQoS"

**.relayIpc.relayAndMux.qMonitorPolicyName = "QTAMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "QTASch"
**.relayIpc.relayAndMux.queueMonitorPolicy.shapersData = xmldoc("QTA.xml", "Configuration/shapers")
**.relayIpc.relayAndMux.queueMonitorPolicy.muxData = xmldoc("QTA.xml", "Configuration/mux")


#**.relayIpc.relayAndMux.maxQueuePolicy.printAtEnd = true
**.ipcProcess[*].relayAndMux.queueMonitorPolicy.printAtEnd = true

[Config BE]
**.defaultThreshQLength = 0
**.defaultMaxQLength =  200


**.relayIpc.relayAndMux.maxQPolicyName = "DumbMaxQ"
**.relayIpc.relayAndMux.qMonitorPolicyName = "ModularMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "DumbSch"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule_Type ="MM_Simple_Out"

**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule_Type = "MM_DL_Drop"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule.data = xmldoc("modules.xml", "Configuration/BEDROP")


[Config WFQ]
**.defaultThreshQLength = 0
**.defaultMaxQLength =  200

**.infection.finTime = 30.1000

**.relayIpc.relayAndMux.maxQPolicyName = "DumbMaxQ"
**.relayIpc.relayAndMux.qMonitorPolicyName = "ModularMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "DumbSch"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule_Type = "MM_WFQ_Out"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule.data = xmldoc("modules.xml", "Configuration/WFQOUT")

**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule_Type = "MM_WFQ_Drop"
**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule.data = xmldoc("modules.xml", "Configuration/WFQDROP")

**.infection.rateMult = 100000000*1.5
**.listener.runname = "150%"

[Config T100]
#**.infection.rateMult = ${usage = 85000000, 90000000,95000000, 120000000, 150000000}
**.infection.rateMult = 100000000*${usage = 0.97,0.98,0.99}
**.listener.runname = ${"97%", "98%", "99%" ! usage}
**.listener.configname = ${method = "BE", "WFQ"}

**.defaultThreshQLength = 0
**.defaultMaxQLength =  200

**.relayIpc.relayAndMux.maxQPolicyName = "DumbMaxQ"
**.relayIpc.relayAndMux.qMonitorPolicyName =  "ModularMonitor"
**.relayIpc.relayAndMux.schedPolicyName = "DumbSch"

**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule_Type = ${"MM_Simple_Out", "MM_WFQ_Out" ! method}
**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule_Type = ${"MM_DL_Drop", "MM_WFQ_Drop" ! method}


**.relayIpc.relayAndMux.queueMonitorPolicy.outputOutSubModule.data = ${"", xmldoc("modules.xml", "Configuration/WFQOUT") ! method}
**.relayIpc.relayAndMux.queueMonitorPolicy.outputDropSubModule.data = ${xmldoc("modules.xml", "Configuration/BEDROP"),xmldoc("modules.xml", "Configuration/WFQDROP") ! method}


