//
// Copyright Â© 2014 - 2015 PRISTINE Consortium (http://ict-pristine.eu)
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

#include <QueuePerNFlow.h>

Define_Module(QueuePerNFlow);

void QueuePerNFlow::onNFlowAlloc(RMTPort* port, Flow* flow)
{
    rmtAllocator->addQueue(RMTQueue::OUTPUT, port, idGenerator->generateIDFromFlow(flow).c_str());
    flow->swapFlow();
    rmtAllocator->addQueue(RMTQueue::INPUT, port, idGenerator->generateIDFromFlow(flow).c_str());
    flow->swapFlow();
}

void QueuePerNFlow::onNM1PortInit(RMTPort* port)
{
    // In this policy, each port gets a queue for each active (N)-flow.
    // Since there's a possibility of RMT receiving a PDU generated by a mock
    // EFCP instance (i.e. its connection-id equals {0, 0, MGMT}), we need to
    // take care of this exception by adding a fallback queue.

    rmtAllocator->addQueue(RMTQueue::OUTPUT, port, "noflow");
    rmtAllocator->addQueue(RMTQueue::INPUT, port, "noflow");
}
