{
  "name": "Rina",
  "tagline": "RINA Simulator",
  "body": "RINA Simulator\r\n====\r\n\r\n###Version changelog\r\n* October 2015-February 2016 - Trento meeting version, Fragmentation/Concatenation in Delimiting, \r\n\t\t\t\t\t\t\t\tDAF level Enrollment, scenario split\r\n* July-September 2015 - RIBd notifiers, pre-EFCPv6 updates, CDAPProcessingBase interface,\r\n\t\t\t\t\t\tmerging partner's contribution (namely routing and congestion control),\r\n\t\t\t\t\t\tadded Hop Count to PDU header  \r\n* May/June 2015 - Enrollment, (N-1)-data/management separation, MIT relicensing,\r\n                  EFCPv4+ updates, separation of QoSCubes and QoS requirements,\r\n                  change of QoSCube-id datatype, source code split between\r\n                  policies and src, PDU headers for (N)-management frames,\r\n                  multiple AEs within single AP communication \r\n* April 2015    - Routing policies prototypes, traceback packet file, CDAP redesign\r\n* March 2015    - Slowdown/Pushupnotif congestion control, basic statistics,\r\n                  flow lifecycle, AEStream/ExtendedPing\r\n* February 2015 - After-Ghent release with FA policies\r\n* January 2015  - Ghent meeting with EFCP, RMT, RA, PDUFTG and policies\r\n* November 2014 - Brussels RV1 with AllNodes examples\r\n* October 2014  - Madrid F2F meeting with working SimpleRelay and TwoCSs scenarios\r\n\r\n###Resources\r\n* [OpenSourceProject Git with archived RINASim releases](https://opensourceprojects.eu/p/pristine/rinasimulator/rinasim/ci/b323f721944033c9f31924c02e2b67ba9c92c712/tree/)\r\n* [VMWare Out-of-the-box virtual machine with RINASim](http://nes.fit.vutbr.cz/ivesely/vm/RINASim.zip)\r\n* [PRISTINE webpage](http://ict-pristine.eu/)\t \r\n* [Developer's mailing-list](https://www.fit.vutbr.cz/mailman/listinfo/rinasim)\r\n* [Deliverable 2.4 describing RINASim January 2015 functionality](http://ict-pristine.eu/wp-content/uploads/2013/12/pristine-d24-rinasim-v1_0.pdf)\r\n* [Deliverable 2.6 describing RINASim December 2015 functionality](http://ict-pristine.eu/wp-content/uploads/2013/12/pristine-d26-rina_sim-draft.pdf)\r\n\r\n###Papers\r\n* [V.Vesely, M.Marek, T.Hykel, O.Rysavy; Skip This Paper - RINASim: Your Recursive InterNetwork Architecture Simulator](http://arxiv.org/abs/1509.03550)\r\n\r\n###Directory structure\r\n\r\n\t/examples\t\t\t\t\t... scenarios testing RINA stack\r\n\t\t/Basics\t\t\t\t\t... simple testing scenarios\r\n\t\t/Congestion\t\t\t\t... congestion control\r\n\t\t/Demos\t\t\t\t\t... use-cases for tutorials and demo sessions\r\n\t\t/LB\t\t\t\t\t\t... load-balancing\r\n\t\t/Routing\t\t\t\t... routing in topologies\r\n\t\t\r\n\t/playground\t\t\t\t\t... unsupported/obsolete scenarios\r\n\t\t\r\n\t/src\t\t\t\t\t\t... source codes' folder\r\n\t\t/Common\t\t\t\t\t... shared basic classes\r\n\t\t/CS\t\t\t\t\t\t... computing system simulation nodes\r\n\t\t/DAF\t\t\t\t\t... DAF components\r\n\t\t/DIF \t\t\t\t\t... DIF component\r\n\t\t/Other\t\t\t\t\t... non-essential user-requested core components\r\n\t\r\n\t/policies\t\t\t\t    ... all programable RINA policies\r\n\t\r\n\t/scripts\r\n\t\tfingerprints.sh\t\t\t... batch for checking/updating fingerprints\r\n\t\tslocstats.sh\t\t\t... counts source lines of code\r\n\r\n###Available policies\r\n\t/DAF                           ... DAF policies\r\n\t/DIF                           ... DIF policies\r\n\t    /FA                        ... policies related to FA modules\r\n\t        /AllocateRetry             ... what happen when M_CREATE is resend by Flow Allocator\r\n\t            /LimitedRetries        ... when retransmit treshold is met, allocation is \r\n\t            \t\t\t\t\t\t   discontinued\r\n\t        /MultilevelQoS             ... when a flow request a new n-1 flow, how its requirements are \r\n\t        \t\t\t\t\t\t\t   mapped to n-1 requirements *not used yet\r\n\t        /NewFlowRequest            ... when new flow is being allocated, how are its \r\n\t        \t\t\t\t\t\t\t   requirements mapped to RA QoSCubes\r\n\t            /ScoreComparer         ... QoSCube with best score wins\r\n\t            /MinComparer           ... QoSCube with minimal feasibility wins\r\n\t    /RA                            ... policies related to RA modules\r\n\t        /AddressComparator         ... policy used for determining whether a PDU address\r\n\t        \t\t\t\t\t\t\t   matches the IPCP's address  \r\n\t            /ExactMatch            ... exact matching\r\n\t            /PrefixMatch           ... matching based on address prefix\r\n\t        /PDUFG                     ... PDU Forwarding Generator providing data used by the \r\n\t        \t\t\t\t\t\t\t   PDU Forwarding policy \r\n\t            /BiDomainGenerator     ... populates forwarding policy with entries on the form samePrefix.Id -> port and distinctPrefix.* -> port\r\n\t            /LatGenerator          ... inform of flow metrics to routing as latency (based on n-1 \r\n\t        \t\t\t\t\t\t\t   QoS cube) instead of hops\r\n\t            /MSimpleGenerator      ... inform of flow metrics to routing as hops, populates forwarding\r\n\t        \t\t\t\t\t\t\t   policy with all existing best next hops\r\n\t            /QoSDomainGenerator    ... populates forwarding policy with best next hop per dst + QoS\r\n\t            /SimpleGenerator       ... inform of flow metrics to routing as hops\r\n\t            /SingleDomainGenerator ... inform of flow metrics to routing as hops, \r\n\t        \t\t\t\t\t\t\t   variation using Domain based routing\r\n\t            /StaticGenerator       ... load forwarding information from XML configuration \r\n\t        /QueueAlloc                ... (N-1)-port queue allocation strategy\r\n\t            /QueuePerNCU           ... one queue per (N)-Cherish/Urgency class\r\n\t            /QueuePerNFlow         ... one queue per (N)-flow \r\n\t            /QueuePerNQoS          ... one queue per (N)-QoS cube\r\n\t            /SingleQueue           ... one queue for all\r\n\t        /QueueIDGen                ... companion policy to QueueAlloc; returns queue ID \r\n\t        \t\t\t\t\t\t\t   for given PDU or Flow object \r\n\t            /IDPerNCU              ... used with QueueAlloc::QueuePerNCU\r\n\t            /IDPerNFlow            ... used with QueueAlloc::QueuePerNFlow\r\n\t            /IDPerNQoS             ... used with QueueAlloc::QueuePerNQoS\r\n\t            /SingleID              ... used with QueueAlloc::SingleQueue\r\n\t    /RMT                           ... policies related to RMT modules\r\n\t        /MaxQueue                  ... policy invoked when a queue size grows over its\r\n\t        \t\t\t\t\t\t\t   threshold \r\n\t            /DumbMaxQ              ... request drop probability to monitor, drop random on that.\r\n\t        \t\t\t\t\t\t\t   used with \"SmartMonitor\"s \r\n\t            /ECNMarker             ... if queue size >= threshold, apply ECN marking on \r\n\t            \t\t\t\t\t\t   new PDUs; if size >= max, drop\r\n\t            **/PortMaxQ              ...  to remove!!**\r\n\t            /ReadRateReducer       ... if queue size >= allowed maximum, stop receiving data\r\n\t            \t\t\t\t\t\t   from input ports \r\n\t            /REDDropper            ... used with Monitor::REDMonitor; Random Early Detection\r\n\t            \t\t\t\t\t       implementation\r\n\t            /TailDrop              ... if queue size >= allowed maximum, drop new PDUs\r\n\t            /UpstreamNotifier      ... if queue size >= allowed maximum, send a notification \r\n\t            \t\t\t\t\t\t   to the PDU sender\r\n\t        /Monitor                   ... state-keeping policy invoked on various queue events \r\n\t            /BEMonitor             ... Best-effort as SmartMonitor using multiple queues\r\n\t            /DLMonitor             ... Dela/Loss monitor implementation as SmartMonitor\r\n\t            /eDLMonitor            ... enhanced-Dela/Loss monitor implementation as SmartMonitor\r\n\t            /REDMonitor            ... used with MaxQueue::REDDropper; Random Early Detection \r\n\t            \t\t\t\t\t       implementation\r\n\t            /DummyMonitor          ... noop\r\n\t            /SmartMonitor          ... monitor interface for use with dumbMaxQ/dumbSch.\r\n\t        \t\t\t\t\t\t\t   can be queried for drop probability and next queue\r\n\t        /PDUForwarding             ... policy used to decide where to forward a PDU\r\n\t            /DomainTabl            ... a table with {domain:{prefix, QoS} -> \r\n\t        \t\t\t\t\t\t\t   { Table:{dstAddr -> port}, default:port } }\r\n\t            /MiniTable             ... a table with {dstAddr -> port} mappings\r\n\t            /MultiMiniTable        ... a table with {dstAddr -> vectior<port>} mappings\r\n\t            /QoSTable              ... a table with {(dstAddr, QoS) -> port} mappings\r\n\t            /SimpleTable           ... a table with {(dstAddr, QoS) -> port} mappings\r\n\t        /Scheduler                 ... policy deciding which (N-1)-port queue should be \r\n\t        \t\t\t\t\t\t\t   processed next\r\n\t            /DumbSch               ... query the monitor for the next queue to serve.\r\n\t        \t\t\t\t\t\t\t   used with \"SmartMonitor\"s\r\n\t            /LongestQFirst         ... pick the queue which contains the most PDUs \r\n\t    /Routing                       ... routing policies\r\n\t        /DomainRouting\t           ... routing policy based on domains. A domain is defined as a sub-set\r\n\t        \t\t\t\t\t\t\t   of the DIF, with its own metrics and routing algorithm.\r\n\t        \t/DV                    ... simple distance vector algorithm for DomainRouting\r\n\t        \t/LS                    ... simple link-state algorithm for DomainRouting\r\n\t        /DummyRouting              ... noop\r\n\t        /SimpleRouting\r\n\t            /SimpleDV              ... a simple distance vector-like protocol\r\n\t            /SimpleLS              ... a simple link-state-like protocol\r\n\t        \r\n          \r\n\t\r\n\t\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}