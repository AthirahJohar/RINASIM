//
// Generated file, do not edit! Created by opp_msgc 4.4 from DAF/CDAP/CDAPMessage.msg.
//

#ifndef _CDAPMESSAGE_M_H_
#define _CDAPMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>DAF/CDAP/CDAPMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum opCode_t {
 * 	M_CONNECT = 0;
 * 	M_CONNECT_R = 1;
 * 	M_RELEASE = 2;
 * 	M_RELEASE_R = 3;
 * 	M_CREATE = 4;
 * 	M_CREATE_R = 5;
 * 	M_DELETE = 6;
 * 	M_DELETE_R = 7;
 * 	M_READ = 8;
 * 	M_READ_R = 9;
 * 	M_CANCELREAD = 10;
 * 	M_CANCELREAD_R = 11;
 * 	M_WRITE = 12;
 * 	M_WRITE_R = 13;
 * 	M_START = 14;
 * 	M_START_R = 15;
 * 	M_STOP = 16;
 * 	M_STOP_R = 17;
 * }
 * </pre>
 */
enum opCode_t {
    M_CONNECT = 0,
    M_CONNECT_R = 1,
    M_RELEASE = 2,
    M_RELEASE_R = 3,
    M_CREATE = 4,
    M_CREATE_R = 5,
    M_DELETE = 6,
    M_DELETE_R = 7,
    M_READ = 8,
    M_READ_R = 9,
    M_CANCELREAD = 10,
    M_CANCELREAD_R = 11,
    M_WRITE = 12,
    M_WRITE_R = 13,
    M_START = 14,
    M_START_R = 15,
    M_STOP = 16,
    M_STOP_R = 17
};

/**
 * Enum generated from <tt>DAF/CDAP/CDAPMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum flagValues_t {
 * 	F_SYNC = 1;								
 * 	F_RD_INCOMPLETE = 2;					
 * }
 * </pre>
 */
enum flagValues_t {
    F_SYNC = 1,
    F_RD_INCOMPLETE = 2
};

/**
 * Enum generated from <tt>DAF/CDAP/CDAPMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum authTypes_t {
 * 	AUTH_NONE = 0;							
 * 	AUTH_PASSWD = 1;						
 * 	AUTH_SSHRSA = 2;						
 * 	AUTH_SSHDSA = 3;						
 * }
 * </pre>
 */
enum authTypes_t {
    AUTH_NONE = 0,
    AUTH_PASSWD = 1,
    AUTH_SSHRSA = 2,
    AUTH_SSHDSA = 3
};

/**
 * Struct generated from DAF/CDAP/CDAPMessage.msg by opp_msgc.
 */
struct objVal_t
{
    objVal_t();
    uint32 intval;
    int32 sintval;
    uint64 int64val;
    int64 sint64val;
    opp_string strval;
    float floatval;
    double doubleval;
};

void doPacking(cCommBuffer *b, objVal_t& a);
void doUnpacking(cCommBuffer *b, objVal_t& a);

/**
 * Struct generated from DAF/CDAP/CDAPMessage.msg by opp_msgc.
 */
struct authValue_t
{
    authValue_t();
    opp_string authName;
    opp_string authPassword;
    opp_string authOther;
};

void doPacking(cCommBuffer *b, authValue_t& a);
void doUnpacking(cCommBuffer *b, authValue_t& a);

/**
 * Class generated from <tt>DAF/CDAP/CDAPMessage.msg</tt> by opp_msgc.
 * <pre>
 * message CDAPMessage {
 * 	uint32 absSyntax;							
 * 	unsigned char opCode enum(opCode_t);		
 * 	uint32 invokeID;								
 * 	unsigned char flags enum(flagValues_t);		
 * 	string objClass;							
 * 	string objName;								
 * 	uint64 objInst;								
 * 	objVal_t objValue;							
 * 	uint32 result; 								
 * 	uint32 scope;								
 * 
 * 	unsigned char authMech enum(authTypes_t);	
 * 	authValue_t authValue;						
 * 	string destAEInst;							
 * 	string destAEName;							
 * 	string destApInst;							
 * 	string destApName;							
 * 	string srcAEInst;							
 * 	string srcAEName;							
 * 	string srcApInst;							
 * 	string srcApName;							
 * 	string resultReason;						
 * 	int64 version;								
 * }
 * </pre>
 */
class CDAPMessage : public ::cMessage
{
  protected:
    uint32 absSyntax_var;
    unsigned char opCode_var;
    uint32 invokeID_var;
    unsigned char flags_var;
    opp_string objClass_var;
    opp_string objName_var;
    uint64 objInst_var;
    objVal_t objValue_var;
    uint32 result_var;
    uint32 scope_var;
    unsigned char authMech_var;
    authValue_t authValue_var;
    opp_string destAEInst_var;
    opp_string destAEName_var;
    opp_string destApInst_var;
    opp_string destApName_var;
    opp_string srcAEInst_var;
    opp_string srcAEName_var;
    opp_string srcApInst_var;
    opp_string srcApName_var;
    opp_string resultReason_var;
    int64 version_var;

  private:
    void copy(const CDAPMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CDAPMessage&);

  public:
    CDAPMessage(const char *name=NULL, int kind=0);
    CDAPMessage(const CDAPMessage& other);
    virtual ~CDAPMessage();
    CDAPMessage& operator=(const CDAPMessage& other);
    virtual CDAPMessage *dup() const {return new CDAPMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual uint32 getAbsSyntax() const;
    virtual void setAbsSyntax(uint32 absSyntax);
    virtual unsigned char getOpCode() const;
    virtual void setOpCode(unsigned char opCode);
    virtual uint32 getInvokeID() const;
    virtual void setInvokeID(uint32 invokeID);
    virtual unsigned char getFlags() const;
    virtual void setFlags(unsigned char flags);
    virtual const char * getObjClass() const;
    virtual void setObjClass(const char * objClass);
    virtual const char * getObjName() const;
    virtual void setObjName(const char * objName);
    virtual uint64 getObjInst() const;
    virtual void setObjInst(uint64 objInst);
    virtual objVal_t& getObjValue();
    virtual const objVal_t& getObjValue() const {return const_cast<CDAPMessage*>(this)->getObjValue();}
    virtual void setObjValue(const objVal_t& objValue);
    virtual uint32 getResult() const;
    virtual void setResult(uint32 result);
    virtual uint32 getScope() const;
    virtual void setScope(uint32 scope);
    virtual unsigned char getAuthMech() const;
    virtual void setAuthMech(unsigned char authMech);
    virtual authValue_t& getAuthValue();
    virtual const authValue_t& getAuthValue() const {return const_cast<CDAPMessage*>(this)->getAuthValue();}
    virtual void setAuthValue(const authValue_t& authValue);
    virtual const char * getDestAEInst() const;
    virtual void setDestAEInst(const char * destAEInst);
    virtual const char * getDestAEName() const;
    virtual void setDestAEName(const char * destAEName);
    virtual const char * getDestApInst() const;
    virtual void setDestApInst(const char * destApInst);
    virtual const char * getDestApName() const;
    virtual void setDestApName(const char * destApName);
    virtual const char * getSrcAEInst() const;
    virtual void setSrcAEInst(const char * srcAEInst);
    virtual const char * getSrcAEName() const;
    virtual void setSrcAEName(const char * srcAEName);
    virtual const char * getSrcApInst() const;
    virtual void setSrcApInst(const char * srcApInst);
    virtual const char * getSrcApName() const;
    virtual void setSrcApName(const char * srcApName);
    virtual const char * getResultReason() const;
    virtual void setResultReason(const char * resultReason);
    virtual int64 getVersion() const;
    virtual void setVersion(int64 version);
};

inline void doPacking(cCommBuffer *b, CDAPMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, CDAPMessage& obj) {obj.parsimUnpack(b);}


#endif // _CDAPMESSAGE_M_H_
