//
// Generated file, do not edit! Created by opp_msgc 4.5 from Common/Data.msg.
//

#ifndef _DATA_M_H_
#define _DATA_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>Common/Data.msg</tt> by opp_msgc.
 * <pre>
 * enum DataType{
 *     	SDU_TYPE 				= 1;
 *     	SDU_FRAGMENT_TYPE		= 2;
 * }
 * </pre>
 */
enum DataType {
    SDU_TYPE = 1,
    SDU_FRAGMENT_TYPE = 2
};

/**
 * Class generated from <tt>Common/Data.msg</tt> by opp_msgc.
 * <pre>
 * message Data {
 *     @customize(true);  
 *     unsigned int dataType;
 *     
 * 
 * }
 * </pre>
 *
 * Data_Base is only useful if it gets subclassed, and Data is derived from it.
 * The minimum code to be written for Data is the following:
 *
 * <pre>
 * class Data : public Data_Base
 * {
 *   private:
 *     void copy(const Data& other) { ... }

 *   public:
 *     Data(const char *name=NULL, int kind=0) : Data_Base(name,kind) {}
 *     Data(const Data& other) : Data_Base(other) {copy(other);}
 *     Data& operator=(const Data& other) {if (this==&other) return *this; Data_Base::operator=(other); copy(other); return *this;}
 *     virtual Data *dup() const {return new Data(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Data_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Data);
 * </pre>
 */
class Data_Base : public ::cMessage
{
  protected:
    unsigned int dataType_var;

  private:
    void copy(const Data_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Data_Base&);
    // make constructors protected to avoid instantiation
    Data_Base(const char *name=NULL, int kind=0);
    Data_Base(const Data_Base& other);
    // make assignment operator protected to force the user override it
    Data_Base& operator=(const Data_Base& other);

  public:
    virtual ~Data_Base();
    virtual Data_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class Data");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getDataType() const;
    virtual void setDataType(unsigned int dataType);
};


#endif // _DATA_M_H_
