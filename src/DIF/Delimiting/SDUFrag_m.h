//
// Generated file, do not edit! Created by opp_msgc 4.5 from DIF/Delimiting/SDUFrag.msg.
//

#ifndef _SDUFRAG_M_H_
#define _SDUFRAG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "SDU.h"
// }}



/**
 * Class generated from <tt>DIF/Delimiting/SDUFrag.msg</tt> by opp_msgc.
 * <pre>
 * message SDUFrag extends SDU {
 *     @customize(true);
 *     dataType = SDU_FRAGMENT_TYPE;
 *     unsigned int fSize;
 *     unsigned int fOffset;
 * }
 * </pre>
 *
 * SDUFrag_Base is only useful if it gets subclassed, and SDUFrag is derived from it.
 * The minimum code to be written for SDUFrag is the following:
 *
 * <pre>
 * class SDUFrag : public SDUFrag_Base
 * {
 *   private:
 *     void copy(const SDUFrag& other) { ... }

 *   public:
 *     SDUFrag(const char *name=NULL, int kind=0) : SDUFrag_Base(name,kind) {}
 *     SDUFrag(const SDUFrag& other) : SDUFrag_Base(other) {copy(other);}
 *     SDUFrag& operator=(const SDUFrag& other) {if (this==&other) return *this; SDUFrag_Base::operator=(other); copy(other); return *this;}
 *     virtual SDUFrag *dup() const {return new SDUFrag(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from SDUFrag_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(SDUFrag);
 * </pre>
 */
class SDUFrag_Base : public ::SDU
{
  protected:
    unsigned int fSize_var;
    unsigned int fOffset_var;

  private:
    void copy(const SDUFrag_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SDUFrag_Base&);
    // make constructors protected to avoid instantiation
    SDUFrag_Base(const char *name=NULL, int kind=0);
    SDUFrag_Base(const SDUFrag_Base& other);
    // make assignment operator protected to force the user override it
    SDUFrag_Base& operator=(const SDUFrag_Base& other);

  public:
    virtual ~SDUFrag_Base();
    virtual SDUFrag_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class SDUFrag");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getFSize() const;
    virtual void setFSize(unsigned int fSize);
    virtual unsigned int getFOffset() const;
    virtual void setFOffset(unsigned int fOffset);
};


#endif // _SDUFRAG_M_H_
