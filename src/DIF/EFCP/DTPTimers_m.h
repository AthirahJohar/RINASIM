//
// Generated file, do not edit! Created by opp_msgc 4.5 from DIF/EFCP/DTPTimers.msg.
//

#ifndef _DTPTIMERS_M_H_
#define _DTPTIMERS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "PDU.h"
typedef PDU* PDU_p;
// }}



/**
 * Enum generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * enum DTPTimerType
 * {
 *   DTP_SENDER_INACTIVITY_TIMER = 1;
 *   DTP_RCVR_INACTIVITY_TIMER = 2;   
 *   DTP_RX_EXPIRY_TIMER = 3;
 * 
 *   DTP_SENDING_RATE_TIMER = 5;
 *   DTP_A_TIMER = 6;
 *   
 * }
 * </pre>
 */
enum DTPTimerType {
    DTP_SENDER_INACTIVITY_TIMER = 1,
    DTP_RCVR_INACTIVITY_TIMER = 2,
    DTP_RX_EXPIRY_TIMER = 3,
    DTP_SENDING_RATE_TIMER = 5,
    DTP_A_TIMER = 6
};

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message DTPTimers {
 * 	int type enum(DTPTimerType);
 * }
 * </pre>
 */
class DTPTimers : public ::cMessage
{
  protected:
    int type_var;

  private:
    void copy(const DTPTimers& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DTPTimers&);

  public:
    DTPTimers(const char *name=NULL, int kind=0);
    DTPTimers(const DTPTimers& other);
    virtual ~DTPTimers();
    DTPTimers& operator=(const DTPTimers& other);
    virtual DTPTimers *dup() const {return new DTPTimers(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, DTPTimers& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DTPTimers& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message InactivityTimer extends DTPTimers{
 *  
 * }
 * </pre>
 */
class InactivityTimer : public ::DTPTimers
{
  protected:

  private:
    void copy(const InactivityTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const InactivityTimer&);

  public:
    InactivityTimer(const char *name=NULL, int kind=0);
    InactivityTimer(const InactivityTimer& other);
    virtual ~InactivityTimer();
    InactivityTimer& operator=(const InactivityTimer& other);
    virtual InactivityTimer *dup() const {return new InactivityTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, InactivityTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, InactivityTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message SenderInactivityTimer extends InactivityTimer{
 *     type = DTP_SENDER_INACTIVITY_TIMER;
 * }
 * </pre>
 */
class SenderInactivityTimer : public ::InactivityTimer
{
  protected:

  private:
    void copy(const SenderInactivityTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SenderInactivityTimer&);

  public:
    SenderInactivityTimer(const char *name=NULL, int kind=0);
    SenderInactivityTimer(const SenderInactivityTimer& other);
    virtual ~SenderInactivityTimer();
    SenderInactivityTimer& operator=(const SenderInactivityTimer& other);
    virtual SenderInactivityTimer *dup() const {return new SenderInactivityTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, SenderInactivityTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SenderInactivityTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message RcvrInactivityTimer extends InactivityTimer{
 *     type = DTP_RCVR_INACTIVITY_TIMER;
 * }
 * </pre>
 */
class RcvrInactivityTimer : public ::InactivityTimer
{
  protected:

  private:
    void copy(const RcvrInactivityTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RcvrInactivityTimer&);

  public:
    RcvrInactivityTimer(const char *name=NULL, int kind=0);
    RcvrInactivityTimer(const RcvrInactivityTimer& other);
    virtual ~RcvrInactivityTimer();
    RcvrInactivityTimer& operator=(const RcvrInactivityTimer& other);
    virtual RcvrInactivityTimer *dup() const {return new RcvrInactivityTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, RcvrInactivityTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RcvrInactivityTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message RxExpiryTimer extends DTPTimers{
 *     type = DTP_RX_EXPIRY_TIMER;
 *     PDU_p pdu = NULL;
 *     unsigned int expiryCount = 0;
 * }
 * </pre>
 */
class RxExpiryTimer : public ::DTPTimers
{
  protected:
    PDU_p pdu_var;
    unsigned int expiryCount_var;

  private:
    void copy(const RxExpiryTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RxExpiryTimer&);

  public:
    RxExpiryTimer(const char *name=NULL, int kind=0);
    RxExpiryTimer(const RxExpiryTimer& other);
    virtual ~RxExpiryTimer();
    RxExpiryTimer& operator=(const RxExpiryTimer& other);
    virtual RxExpiryTimer *dup() const {return new RxExpiryTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual PDU_p& getPdu();
    virtual const PDU_p& getPdu() const {return const_cast<RxExpiryTimer*>(this)->getPdu();}
    virtual void setPdu(const PDU_p& pdu);
    virtual unsigned int getExpiryCount() const;
    virtual void setExpiryCount(unsigned int expiryCount);
};

inline void doPacking(cCommBuffer *b, RxExpiryTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RxExpiryTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message SendingRateTimer extends DTPTimers{
 * 	type = DTP_SENDING_RATE_TIMER;   
 * }
 * </pre>
 */
class SendingRateTimer : public ::DTPTimers
{
  protected:

  private:
    void copy(const SendingRateTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SendingRateTimer&);

  public:
    SendingRateTimer(const char *name=NULL, int kind=0);
    SendingRateTimer(const SendingRateTimer& other);
    virtual ~SendingRateTimer();
    SendingRateTimer& operator=(const SendingRateTimer& other);
    virtual SendingRateTimer *dup() const {return new SendingRateTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, SendingRateTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SendingRateTimer& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message ATimer extends DTPTimers{
 *  	type = DTP_A_TIMER;   
 *  	PDU_p pdu = NULL;
 * }
 * </pre>
 */
class ATimer : public ::DTPTimers
{
  protected:
    PDU_p pdu_var;

  private:
    void copy(const ATimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ATimer&);

  public:
    ATimer(const char *name=NULL, int kind=0);
    ATimer(const ATimer& other);
    virtual ~ATimer();
    ATimer& operator=(const ATimer& other);
    virtual ATimer *dup() const {return new ATimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual PDU_p& getPdu();
    virtual const PDU_p& getPdu() const {return const_cast<ATimer*>(this)->getPdu();}
    virtual void setPdu(const PDU_p& pdu);
};

inline void doPacking(cCommBuffer *b, ATimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ATimer& obj) {obj.parsimUnpack(b);}


#endif // _DTPTIMERS_M_H_
