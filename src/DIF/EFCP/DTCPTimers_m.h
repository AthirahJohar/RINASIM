//
// Generated file, do not edit! Created by opp_msgc 4.5 from DIF/EFCP/DTCPTimers.msg.
//

#ifndef _DTCPTIMERS_M_H_
#define _DTCPTIMERS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0405
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>DIF/EFCP/DTCPTimers.msg</tt> by opp_msgc.
 * <pre>
 * enum DTCPTimerType
 * {
 *   DTCP_WINDOW_TIMER = 1;
 *   
 * }
 * </pre>
 */
enum DTCPTimerType {
    DTCP_WINDOW_TIMER = 1
};

/**
 * Class generated from <tt>DIF/EFCP/DTCPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message DTCPTimers {
 * 	int type enum(DTCPTimerType);
 * }
 * </pre>
 */
class DTCPTimers : public ::cMessage
{
  protected:
    int type_var;

  private:
    void copy(const DTCPTimers& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DTCPTimers&);

  public:
    DTCPTimers(const char *name=NULL, int kind=0);
    DTCPTimers(const DTCPTimers& other);
    virtual ~DTCPTimers();
    DTCPTimers& operator=(const DTCPTimers& other);
    virtual DTCPTimers *dup() const {return new DTCPTimers(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, DTCPTimers& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DTCPTimers& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>DIF/EFCP/DTCPTimers.msg</tt> by opp_msgc.
 * <pre>
 * message WindowTimer extends DTCPTimers{
 *     type = DTCP_WINDOW_TIMER;
 * }
 * </pre>
 */
class WindowTimer : public ::DTCPTimers
{
  protected:

  private:
    void copy(const WindowTimer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WindowTimer&);

  public:
    WindowTimer(const char *name=NULL, int kind=0);
    WindowTimer(const WindowTimer& other);
    virtual ~WindowTimer();
    WindowTimer& operator=(const WindowTimer& other);
    virtual WindowTimer *dup() const {return new WindowTimer(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, WindowTimer& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WindowTimer& obj) {obj.parsimUnpack(b);}


#endif // _DTCPTIMERS_M_H_
